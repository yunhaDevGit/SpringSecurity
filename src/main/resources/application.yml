server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:4000/security?serverTimezone=Asia/Seoul
    username: security
    password: security

#  pom.xml에 mustache 의존성을 추가해줬기 때문에 자동으로 기본 경로가 잡히고
#  뷰 리졸버 경로도 기본으로 등록되기 때문에 생략 가능
#  mvc:
#    view:
#      prefix: /templates/
#      suffix: .mustache

  jpa:
    hibernate:
      ddl-auto: update #create update none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true
#    pom.xml에 spring-boot-starter-data-jpa 의존성 추가 해주고
      ##    application.yml에 jpa 설정해주면, db table을 자동으로 만들어준다
    ##    > ddl-auto: create - table이 있다면, 지우고 다시 만든다
    ##    > ddl-auto: update - table이 있다면, 거기에 업데이트

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 225849192289-f0n5arsu5ujvv1pa4vkk3hoalcec1tg9.apps.googleusercontent.com
            client-secret: AOEBPnuni1qrV7wpO4CpYbIB
            scope:
              - email
              - profile

          naver:
            client-id: nbFuk_4VGACcaT2VD8qS
            client-secret: Avyb_tfTlE
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            # 페이스북, 구글, 트위터의 redirect-uri 기본 경로가 /login/oauth2/code이기 때문에 따로 적어주지 않아도 된다

        # 네이버는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
        # 요청주소도 다르고, 응답 데이터도 다르기 때문이다
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원 정보를 json으로 받는데 response라는 키값으로 네이버가 리턴해준다
